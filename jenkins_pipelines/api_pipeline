pipeline {
    agent {
        label 'API' // Use the label assigned to the Jenkins agent
    }
    environment {
        TEST_CONTAINER_NAME = "jenkins-test-container-${BUILD_NUMBER}"
        TEST_IMAGE_NAME = "robot-framework-base-image"
    }
    stages {
        stage('Create LXD Container') {
            steps {
                script {
                    // Create a new LXD container with a unique name
                    sh "lxc launch ${env.TEST_IMAGE_NAME} ${env.TEST_CONTAINER_NAME}"
                }
            }
        }
        stage('Prepare Container Environment') {
            steps {
                script {
                    // Ensure the tests directory exists in the container
                    sh "lxc exec ${env.TEST_CONTAINER_NAME} -- mkdir -p /root/tests"
                }
            }
        }
        stage('Verify Test Files on Agent') {
            steps {
                script {
                    // Verify the test files are present on the Jenkins agent
                    sh "ls -la /home/jenkins/tests"
                }
            }
        }
        stage('Copy Test Files') {
            steps {
                script {
                    // Copy test files into the LXD container correctly
                    sh "lxc file push -r /home/jenkins/tests/* ${env.TEST_CONTAINER_NAME}/root/tests/"
                }
            }
        }
        stage('List Files in Container Before Test') {
            steps {
                script {
                    // List files in the container to verify the path
                    sh "lxc exec ${env.TEST_CONTAINER_NAME} -- ls -la /root/tests"
                }
            }
        }
        stage('Run Robot Framework Tests') {
            steps {
                script {
                    catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                        // Run Robot Framework tests inside the LXD container
                        sh "lxc exec ${env.TEST_CONTAINER_NAME} -- bash -c 'source .venv/bin/activate && robot --outputdir /root/tests /root/tests/test_api.robot'"
                    }
                }
            }
        }
        stage('List Files in Container After Test') {
            steps {
                script {
                    // List files in the container after the tests to verify the results path
                    sh "lxc exec ${env.TEST_CONTAINER_NAME} -- ls -la /root/tests"
                }
            }
        }
    }
    post {
        always {
            script {
                // Collect Test Results
                sh "mkdir -p results/${BUILD_NUMBER}"
                
                // Copy test results from the LXD container to the host
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh "lxc file pull ${env.TEST_CONTAINER_NAME}/root/tests/output.xml results/${BUILD_NUMBER}/output.xml"
                    sh "lxc file pull ${env.TEST_CONTAINER_NAME}/root/tests/report.html results/${BUILD_NUMBER}/report.html"
                    sh "lxc file pull ${env.TEST_CONTAINER_NAME}/root/tests/log.html results/${BUILD_NUMBER}/log.html"
                }

                // Archive Robot Framework test results
                archiveArtifacts artifacts: "results/${BUILD_NUMBER}/*", allowEmptyArchive: true

                // Publish Robot Framework results
                robot outputPath: "results/${BUILD_NUMBER}", logFileName: "log.html", reportFileName: "report.html", outputFileName: "output.xml"

                // Ensure the LXD container is stopped and deleted even if there was an error
                //sh "lxc stop ${env.TEST_CONTAINER_NAME} || true"
                //sh "lxc delete ${env.TEST_CONTAINER_NAME} || true"

                // Clean up the workspace after the build
                cleanWs()
            }
        }
    }
}
